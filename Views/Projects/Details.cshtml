@model CrucibleBugTracker.Models.Project

@using CrucibleBugTracker.Services.Interfaces
@using CrucibleBugTracker.Enums
@using Microsoft.AspNetCore.Identity;
@using CrucibleBugTracker.Extensions;


@inject IBTFileService _FileService
@inject IBTRoleService _RoleService
@inject IBTProjectService _ProjectService
@inject UserManager<BTUser> _UserManager

@{
    ViewData["Title"] = "Details";
    BTUser? projectManager = await _ProjectService.GetProjectManagerAsync(Model.Id, Model.CompanyId);
    string? userId = (await _UserManager.GetUserAsync(User))?.Id;
    int companyId = User.Identity!.GetCompanyId();
    List<string> companyDeveloperIds = (await _RoleService.GetUsersInRoleAsync(nameof(BTRoles.Developer), companyId)).Select(u => u.Id).ToList();
    ViewData["ProjectManagers"] = new SelectList(await _RoleService.GetUsersInRoleAsync(nameof(BTRoles.ProjectManager), companyId), nameof(BTUser.Id), nameof(BTUser.FullName));
}


<div class="p-3 d-flex flex-column">
    <h1>Project Details</h1>
    <div class="row mb-3">
        <div class="col-12">
            <div class="card" style="margin-bottom:1rem;">
                <div class="card-header d-flex">
                    <h5>
                        @{
                            if (Model.Archived)
                            {
                                <span class="badge bg-info">Archived</span>
                            }
                            else if (Model.StartDate > DateTime.UtcNow)
                            {
                                <span class="badge bg-primary">Not Started</span>
                            }
                            else if (Model.EndDate < DateTime.UtcNow)
                            {
                                <span class="badge bg-danger">Past Due</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">In Progress</span>
                            }
                        }
                    </h5>
                    @if (User.IsInRole(nameof(BTRoles.Admin)) || projectManager?.Id == userId)
                    {
                        <div class="ms-auto">
                            <a class="btn btn-sm btn-secondary mr-2" asp-controller="Projects" asp-action="Edit" asp-route-id="@Model.Id">Edit</a>
                            @if (Model.Archived)
                            {
                                <a role="button" data-toggle="modal" class="btn btn-sm btn-success" data-target="#restoreProjectModal" onclick="populateRestoreModal(@Model.Id, @Model.Tickets.Count(t => t.ArchivedByProject == true), '@Model.Name')">Restore Project</a>
                            }
                            else
                            {
                                <a role="button" data-toggle="modal" class="btn btn-sm btn-danger" data-target="#archiveProjectModal" onclick="populateArchiveModal(@Model.Id, @Model.Tickets.Count(t => t.ArchivedByProject == false && t.Archived == false), '@Model.Name')">Archive Project</a>
                            }
                        </div>
                    }
                </div>
                <div class="card-body pb-1">
                    <div class="d-flex flex-row justify-content-between">
                        <h5 class="card-title mb-0">
                            @Model.Name&nbsp;
                            @{
                                @if (Model.Archived == true)
                                {
                                    <span class="badge bg-info-bright">No Priority</span>
                                }
                                else
                                {
                                    if (Model.ProjectPriority?.Name == nameof(BTProjectPriorities.Low))
                                    {
                                        <span class="badge bg-success-bright">@Model.ProjectPriority?.Name Priority</span>
                                    }
                                    if (Model.ProjectPriority?.Name == nameof(BTProjectPriorities.Medium))
                                    {
                                        <span class="badge bg-warning-bright">@Model.ProjectPriority?.Name Priority</span>
                                    }
                                    if (Model.ProjectPriority?.Name == nameof(BTProjectPriorities.High))
                                    {
                                        <span class="badge bg-secondary-bright">@Model.ProjectPriority?.Name Priority</span>
                                    }
                                    if (Model.ProjectPriority?.Name == nameof(BTProjectPriorities.Urgent))
                                    {
                                        <span class="badge bg-danger-bright">@Model.ProjectPriority?.Name Priority</span>
                                    }
                                }
                            }
                        </h5>
                        <div>
                            <h6 class="card-subtitle mb-0 text-muted">Created Date: @Model.Created.ToString("MMMM dd, yyyy")</h6>
                        </div>
                    </div>


                    <p class="card-text">
                        @Html.Raw(Model.Description)
                    </p>
                    <div class="text-end">
                        @if (User.IsInRole(nameof(BTRoles.Admin)) || projectManager?.Id == userId)
                        {
                            <h6 class="card-subtitle text-primary" id="assignUser" data-toggle="modal" data-target="#assignPMModal" role="button" onclick="populatePMModal('@Model.Id', '@projectManager?.Id', '@Model.Name')">Project Manager: @(projectManager?.FullName ?? "Unassigned")</h6>
                        }
                        else
                        {
                            <h6 class="card-subtitle text-muted" id="assignUser" data-toggle="modal" data-target="#assignPMModal" role="button" onclick="populatePMModal('@Model.Id', '@projectManager?.Id', '@Model.Name')">
                                Project Manager:
                                @{
                                    if (string.IsNullOrEmpty(projectManager?.FullName))
                                    {
                                        <span>Unassigned</span>
                                    }
                                    else
                                    {
                                        <span>@projectManager.FullName</span>
                                    }
                                }
                            </h6>
                        }



                    </div>
                </div>
                <div class="card-footer d-flex flex-row justify-content-between pt-3">
                    <div class="">
                        <h6 class="card-subtitle text-muted">Start Date: @Model.StartDate.ToString("MMMM dd, yyyy")</h6>
                    </div>
                    <div class="">
                        <h6 class="card-subtitle text-muted">End Date: @Model.EndDate.ToString("MMMM dd, yyyy")</h6>
                    </div>
                </div>
            </div>
        </div>
        @if (User.IsInRole(nameof(BTRoles.Admin)) || projectManager?.Id == userId)
        {
            <div class="d-flex flex-row">
                <a asp-controller="Projects" asp-action="ManageProjectMembers" asp-route-id="@Model.Id" class="btn btn-secondary ms-auto btn-sm">
                    Manage Project Members
                </a>
            </div>
        }
        <div class="col-12" style="margin-top:1rem;">
            <div class="row">
                <div class="col-12 col-lg-6 mb-3 mb-lg-0">
                    <div class="card h-100 assignProjectUsers">
                        <div class="card-header">
                            Developers
                        </div>
                        <div class="card-body assignProjectUsersTable">
                            <ul>
                                @{
                                    int memberCount = 0;
                                    foreach (BTUser member in Model.Members)
                                    {

                                        if (await _RoleService.IsUserInRole(member, nameof(BTRoles.Developer)))
                                        {
                                            <li>
                                                @if (member.ImageFileData != null)
                                                {
                                                    <figure class="avatar avatar-sm">
                                                        <img src="@_FileService.ConvertByteArrayToFile(member.ImageFileData, member.ImageFileType, DefaultImage.BTUserImage)"
                                                             class="rounded-circle"
                                                             alt="avatar">
                                                    </figure>
                                                    @member.FullName
                                                }
                                                else
                                                {
                                                    <figure class="avatar avatar-sm mr-3">
                                                        <span class="avatar-title bg-info-bright text-info rounded-circle">
                                                            @member.FirstName?[0]
                                                        </span>
                                                    </figure>
                                                    @member.FullName
                                                }
                                            </li>
                                            <hr />

                                            continue;
                                        }
                                        memberCount++;

                                        if (memberCount == Model.Members.Count)
                                        {
                                            <h5 class="text-center">No Developers Assigned</h5>
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="col-12 col-lg-6">
                    <div class="card h-100 assignProjectUsers">
                        <div class="card-header">
                            Submitters
                        </div>
                        <div class="card-body assignProjectUsersTable">
                            <ul>
                                @{
                                    memberCount = 0;
                                    foreach (BTUser member in Model.Members)
                                    {
                                        if (await _RoleService.IsUserInRole(member, nameof(BTRoles.Submitter)))
                                        {
                                            <li>
                                                @if (member.ImageFileData != null)
                                                {
                                                    <figure class="avatar avatra-sm">
                                                        <img src="@_FileService.ConvertByteArrayToFile(member.ImageFileData, member.ImageFileType, DefaultImage.BTUserImage)"
                                                             class="rounded-circle"
                                                             alt="avatar">
                                                    </figure>
                                                    @member.FullName
                                                }
                                                else
                                                {
                                                    <figure class="avatar avatar-sm mr-3">
                                                        <span class="avatar-title bg-info-bright text-info rounded-circle">
                                                            @member.FirstName?[0]
                                                        </span>
                                                    </figure>
                                                    @member.FullName
                                                }
                                            </li>
                                            <hr />

                                            continue;
                                        }
                                        memberCount++;

                                        if (memberCount == Model.Members.Count)
                                        {
                                            <h5 class="text-center">No Submitters Assigned</h5>
                                        }
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">@ViewBag.Title</h6>
                    <div class="table-responsive text-white">
                        <table id="ticketsTable" class="table">
                            <thead>
                                <tr class="text-center">
                                    <th class="text-start">Ticket Title</th>
                                    <th class="text-start">Project</th>
                                    <th>Last Updated Date</th>
                                    <th>Submitter</th>
                                    <th>Type</th>
                                    <th>Priority</th>
                                    <th>Status</th>
                                    @if (ViewBag.Title == "All Tickets")
                                    {
                                        <th>Archived</th>
                                    }
                                    <th>Developer</th>
                                    <th class="text-right">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    foreach (Ticket ticket in Model.Tickets)
                                    {
                                        <tr class="text-center">
                                            <td class="text-start">
                                                <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id">@ticket.Title</a>
                                            </td>
                                            <td class="text-start"><a asp-controller="Projects" asp-action="Details" asp-route-id="@ticket.ProjectId">@ticket.Project?.Name</a></td>
                                            @if (ticket.UpdatedDate == null)
                                            {
                                                <td>@ticket.Created.ToString("MMM dd, yyyy")</td>
                                            }
                                            else
                                            {
                                                <td>@ticket.UpdatedDate.Value.ToString("MMM dd, yyyy")</td>
                                            }
                                            <td>
                                                @if (ticket.SubmitterUser?.ImageFileData != null)
                                                {
                                                    <figure class="avatar">
                                                        <img data-bs-toggle="tooltip"
                                                             data-bs-placement="top"
                                                             title="@ticket.SubmitterUser?.FullName"
                                                             data-bs-title="@ticket.SubmitterUser?.FullName" src="@_FileService.ConvertByteArrayToFile(ticket.SubmitterUser?.ImageFileData, ticket.SubmitterUser?.ImageFileType, DefaultImage.BTUserImage)" class="rounded-circle" alt="avatar">
                                                    </figure>
                                                }
                                                else
                                                {
                                                    <figure class="avatar">
                                                        <span class="avatar-title bg-info-bright text-info rounded-circle"
                                                              data-bs-toggle="tooltip"
                                                              data-bs-placement="top"
                                                              title="@ticket.SubmitterUser?.FullName"
                                                              data-bs-title="@ticket.SubmitterUser?.FullName">
                                                            @ticket.SubmitterUser?.FirstName?[0]
                                                        </span>
                                                    </figure>
                                                }
                                            </td>
                                            <td>
                                                @switch (ticket.TicketType?.Name)
                                                {
                                                    case nameof(BTTicketTypes.NewDevelopment):
                                                        <span class="badge bg-facebook"><i class="ti-bell"></i>&nbsp;&nbsp;New Development</span>
                                                        break;
                                                    case nameof(BTTicketTypes.GeneralTask):
                                                        <span class="badge bg-dribbble"><i class="fa fa-user"></i>&nbsp;&nbsp;General Task</span>
                                                        break;
                                                    case nameof(BTTicketTypes.WorkTask):
                                                        <span class="badge bg-linkedin"><i class="fa fa-users"></i>&nbsp;&nbsp;Work Task</span>
                                                        break;
                                                    case nameof(BTTicketTypes.Enhancement):
                                                        <span class="badge bg-warning"><i class="fa fa-plus"></i>&nbsp;&nbsp;Enhancement</span>
                                                        break;
                                                    case nameof(BTTicketTypes.ChangeRequest):
                                                        <span class="badge bg-google"><i class="fa fa-info-circle"></i>&nbsp;&nbsp;Change Request</span>
                                                        break;
                                                    case nameof(BTTicketTypes.Defect):
                                                        <span class="badge bg-youtube"><i class="fa fa-warning"></i>&nbsp;&nbsp;Defect</span>
                                                        break;
                                                    default:
                                                        break;
                                                }
                                            </td>
                                            <td>
                                                @if (ticket.Archived == true)
                                                {
                                                    <span class="badge bg-info-bright">None</span>
                                                }
                                                else
                                                {
                                                    switch (ticket.TicketPriority?.Name)
                                                    {
                                                        case nameof(BTTicketPriorities.Low):
                                                            <span class="badge bg-success-bright">@ticket.TicketPriority.Name</span>
                                                            break;
                                                        case nameof(BTTicketPriorities.Medium):
                                                            <span class="badge bg-warning-bright">@ticket.TicketPriority.Name</span>
                                                            break;
                                                        case nameof(BTTicketPriorities.High):
                                                            <span class="badge bg-secondary-bright">@ticket.TicketPriority.Name</span>
                                                            break;
                                                        case nameof(BTTicketPriorities.Urgent):
                                                            <span class="badge bg-danger-bright">@ticket.TicketPriority.Name</span>
                                                            break;
                                                        default:
                                                            break;
                                                    }
                                                }
                                            </td>
                                            <td>
                                                @switch (ticket.TicketStatus?.Name)
                                                {
                                                    case nameof(BTTicketStatuses.New):
                                                        <span class="badge bg-primary">@ticket.TicketStatus.Name</span>
                                                        break;
                                                    case nameof(BTTicketStatuses.Development):
                                                        <span class="badge bg-secondary">@ticket.TicketStatus.Name</span>
                                                        break;
                                                    case nameof(BTTicketStatuses.Testing):
                                                        <span class="badge bg-info">@ticket.TicketStatus.Name</span>
                                                        break; ;
                                                    case nameof(BTTicketStatuses.Resolved):
                                                        <span class="badge bg-sucess">@ticket.TicketStatus.Name</span>
                                                        break;
                                                    default:
                                                        break;
                                                }
                                            </td>
                                            @if (ViewBag.Title == "All Tickets")
                                            {
                                                @if (ticket.Archived)
                                                {
                                                    <td class="text-success">Archived&nbsp;&nbsp;<i class="bi bi-door-closed"></i></td>
                                                }
                                                else
                                                {
                                                    <td class="text-danger">Active&nbsp;&nbsp;<i class="bi bi-door-open"></i></td>
                                                }
                                            }
                                            <td>
                                                @if (ticket.DeveloperUserId != null)
                                                {
                                                    @if (ticket.DeveloperUser?.ImageFileData != null)
                                                    {
                                                        <figure class="avatar">
                                                            <img data-bs-toggle="tooltip"
                                                                 data-bs-placement="top"
                                                                 title="@ticket.DeveloperUser?.FullName"
                                                                 data-bs-title="@ticket.DeveloperUser?.FullName" src="@_FileService.ConvertByteArrayToFile(ticket.DeveloperUser?.ImageFileData, ticket.DeveloperUser?.ImageFileType, DefaultImage.BTUserImage)" class="rounded-circle" alt="avatar">
                                                        </figure>
                                                    }
                                                    else
                                                    {
                                                        <figure class="avatar">
                                                            <span class="avatar-title bg-info-bright text-info rounded-circle"
                                                                  data-bs-toggle="tooltip"
                                                                  data-bs-placement="top"
                                                                  title="@ticket.DeveloperUser?.FullName"
                                                                  data-bs-title="@ticket.DeveloperUser?.FullName">
                                                                @ticket.DeveloperUser?.FirstName?[0]
                                                            </span>
                                                        </figure>
                                                    }
                                                }
                                                else
                                                {
                                                    <a class="btn btn-outline-primary text-start" id="unassignedButton" data-toggle="modal" data-target="#assignDevModal" onclick="populateDevModal(@ticket.Id, @ticket.ProjectId, '@ticket.DeveloperUserId', '@ticket.Title')"><span>Unassigned</span></a>
                                                }
                                            </td>
                                            <td class="text-right">
                                                <div class="dropdown">
                                                    <a href="#" data-toggle="dropdown"
                                                       class="btn btn-floating"
                                                       aria-haspopup="true" aria-expanded="false">
                                                        <i class="ti-more-alt"></i>
                                                    </a>
                                                    <div class="dropdown-menu dropdown-menu-right">
                                                        <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id" class="dropdown-item">View Detail</a>
                                                        @{
                                                            if (User.IsInRole(nameof(BTRoles.Admin)) || (await _ProjectService.GetProjectManagerAsync(ticket.ProjectId, companyId))?.Id == _UserManager.GetUserId(User))
                                                            {
                                                                <a role="button" data-toggle="modal" data-target="#assignDevModal" class="dropdown-item" onclick="populateDevModal(@ticket.Id, @ticket.ProjectId, '@ticket.DeveloperUserId', '@ticket.Title')">Assign Dev</a>
                                                                <a asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticket.Id" class="dropdown-item">Edit</a>

                                                                @if (ticket.Archived)
                                                                {
                                                                    <a role="button" data-toggle="modal" data-target="#restoreTicketModal" class="dropdown-item text-success" onclick="populateTicketRestoreModal(@ticket.Id, '@ticket.Title')">Restore</a>
                                                                }
                                                                else
                                                                {
                                                                    <a role="button" data-toggle="modal" data-target="#archiveTicketModal" class="dropdown-item text-danger" onclick="populateTicketArchiveModal(@ticket.Id, '@ticket.Title')">Archive</a>
                                                                }
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div>
    <a asp-action="Index">Back to List</a>
</div>

<div>
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.ImageFormFile)
        </dt>
        <dd class="col-sm-10">
            <img src="@_FileService.ConvertByteArrayToFile(Model.ImageFileData, Model.ImageFileType, DefaultImage.ProjectImage)" class="img-fluid" id="projectImage" />
        </dd>
    </dl>
</div>

<div class="modal fade" id="restoreProjectModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Restore Project</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="Restore" asp-route-id="" method="post" class="d-flex flex-column">
                <div class="modal-body pt-0">
                    <input type="hidden" id="restoreProject" name="restoreProjectId" value="" />
                    <h5 id="restoreProjectName">Project Name</h5>
                    <span>Are you sure you want to restore this project? This will also restore <span id="ticketsToRestore"></span> ticket(s) that were archived by this project.</span>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No/Close
                    </button>
                    <button type="submit" class="btn btn-primary">Yes/Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="archiveProjectModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Archive Project</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="Archive" method="post" class="d-flex flex-column">
                <div class="modal-body pt-0">
                    <input type="hidden" id="archiveProject" name="archiveProjectId" value="" />
                    <h5 id="archiveProjectName">Project Name</h5>
                    <span>Are you sure you want to archive this Project? This will also archive <span id="ticketsToArchive"></span> ticket(s) not already archived in this project.</span>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No/Close
                    </button>
                    <button type="submit" class="btn btn-primary">Yes/Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="assignPMModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Assign Project Manager</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-controller="Projects" asp-action="AssignPM" method="post" class="d-flex flex-column">
                <div class="modal-body pt-1">
                    <input type="hidden" id="modalProjectId" name="projectId" value="" />
                    <h5 id="modalProjectName"></h5>
                    <select class="form-control" asp-items="@ViewBag.ProjectManagers" name="projectManagerId" id="projectManagers">
                        <option value="@null">Unassigned</option>
                    </select>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Close
                    </button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="assignDevModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Assign Developer</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="AssignDev" asp-controller="Tickets" method="post" class="d-flex flex-column">
                <div class="modal-body pt-1">
                    <h5 id="modalTicketTitle">Ticket Title</h5>
                    <input type="hidden" id="modalTicketId" name="ticketId" value="" />
                    <select class="form-control" name="developerId" id="developerUsers">
                        <option value="@null">Unassigned</option>
                    </select>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Close
                    </button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="restoreTicketModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Restore Ticket</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="Restore" asp-controller="Tickets" method="post" class="d-flex flex-column">
                <div class="modal-body pt-0">
                    <h5 id="restoreTicketTitle">Ticket Title</h5>
                    <input type="hidden" id="restoreTicket" name="restoreTicketId" value="" />
                    <span>Are you sure you want to restore this ticket?</span>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No/Close
                    </button>
                    <button type="submit" class="btn btn-primary">Yes/Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="archiveTicketModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Archive Ticket</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="Archive" method="post" asp-controller="Tickets" class="d-flex flex-column">
                <div class="modal-body pt-0">
                    <h5 id="archiveTicketTitle">Ticket Title</h5>
                    <input type="hidden" id="archiveTicket" name="archiveTicketId" value="" />
                    <span>Are you sure you want to archive this ticket?</span>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No/Close
                    </button>
                    <button type="submit" class="btn btn-primary">Yes/Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>


@section scripts {
    <script>
        $(document).ready(function () {
            $('#ticketsTable').DataTable({
                "columnDefs": [
                    { "type": "date", "targets": [2] },
                    { "orderable": false, "targets": [-1] }
                ]
            });
        });
    </script>
    <script>
        let projectMembers = [
            {
                projectId: @Model.Id,
                members: [
        @foreach (var member in Model.Members.Where(m => companyDeveloperIds.Contains(m.Id) == true))
        {
            <text>
                        {
                            name: '@member.FullName',
                            id: '@member.Id',
                        },
            </text>
        }
                                                                                                                                                                                                                                    ]
            },


        ];

        function getMembers(projectId) {
            return projectMembers.find(p => p.projectId == projectId).members;
        }
        function populateDevModal(iD, projectId, developerId, ticketTitle) {
            var ticketId = document.getElementById("modalTicketId");
            ticketId.value = iD;

            var modalTicketTitle = document.getElementById("modalTicketTitle");
            modalTicketTitle.innerHTML = ticketTitle;

            members = getMembers(projectId);

            var select = document.getElementById("developerUsers");
            members.forEach(function (member) {
                var option = document.createElement("option");
                option.text = member.name;
                option.value = member.id;

                if (option.value == developerId) {
                    option.selected = true;
                }

                select.add(option);
            });
        }

        function populatePMModal(projectId, projectManagerId, projectName) {
            var project = document.getElementById("modalProjectId");
            project.value = projectId;

            var modalProjectName = document.getElementById("modalProjectName");
            modalProjectName.innerHTML = projectName;

            var projectManagers = document.getElementById("projectManagers");

            for (var i = 0; i < projectManagers.options.length; i++) {
                if (projectManagers.options[i].value == projectManagerId) {
                    projectManagers.options[i].selected = true;
                    break;
                }
            }
        }

        function populateArchiveModal(archiveId, numberOfTickets, projectName) {
            var projectId = document.getElementById("archiveProject");
            projectId.value = archiveId

            var ticketsToArchive = document.getElementById("ticketsToArchive");
            ticketsToArchive.innerHTML = numberOfTickets;

            var archiveProjectName = document.getElementById("archiveProjectName");
            archiveProjectName.innerHTML = projectName;
        }

        function populateRestoreModal(restoreId, numberOfTickets, projectName) {
            var projectId = document.getElementById("restoreProject");
            projectId.value = restoreId;

            var ticketsToRestore = document.getElementById("ticketsToRestore");
            ticketsToRestore.innerHTML = numberOfTickets;

            var restoreProjectName = document.getElementById("restoreProjectName");
            restoreProjectName.innerHTML = projectName;
        }

        function populateTicketArchiveModal(archiveId, ticketTitle) {
            var ticketId = document.getElementById("archiveTicket");
            ticketId.value = archiveId
            var archiveTicketTitle = document.getElementById("archiveTicketTitle");
            archiveTicketTitle.innerHTML = ticketTitle;
        }

        function populateTicketRestoreModal(restoreId, ticketTitle) {
            var ticketId = document.getElementById("restoreTicket");
            ticketId.value = restoreId;
            var restoreTicketTitle = document.getElementById("restoreTicketTitle");
            restoreTicketTitle.innerHTML = ticketTitle;
        }
    </script>
}
