@model IEnumerable<CrucibleBugTracker.Models.Ticket>

@using CrucibleBugTracker.Enums
@using CrucibleBugTracker.Services.Interfaces
@using Microsoft.AspNetCore.Identity;
@using CrucibleBugTracker.Extensions;

@inject IBTProjectService _ProjectService
@inject IBTFileService _FileService
@inject IBTRoleService _RoleService
@inject UserManager<BTUser> _UserManager

@{
    ViewData["Title"] = ViewBag.Title;
    int companyId = User.Identity!.GetCompanyId(); ;
    List<string> companyDeveloperIds = (await _RoleService.GetUsersInRoleAsync(nameof(BTRoles.Developer), companyId)).Select(u => u.Id).ToList();
}

<div class="page-header d-md-flex justify-content-between">
    <div>
        <h3>Tickets</h3>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a asp-controller="Home" asp-action="Index">Home</a>
                </li>
                <li class="breadcrumb-item">
                    <a asp-controller="Tickets" asp-action="Index">Tickets</a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">@ViewBag.Title</li>
            </ol>
        </nav>
    </div>
    <div class="mt-2 mt-md-0">
        <div class="dropdown">
            <a href="#" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                <i class="ti-settings mr-2"></i> Actions
            </a>
            <div class="dropdown-menu dropdown-menu-right">
                <a class="dropdown-item" asp-controller="Tickets" asp-action="Create">Create a ticket</a>
                <a class="dropdown-item" href="#">Another action</a>
                <a class="dropdown-item" href="#">Something else here</a>
            </div>
        </div>
    </div>
</div>

<!-- Info Pills -->
<div class="row mt-2">
    <div class="col-lg-3 col-md-6 col-sm-6">
        <a style="text-decoration:none">
            <div class="card text-center bg-info">
                <div class="body">
                    <div class="p-15 text-light">
                        <h3>@*@Model.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()*@</h3>
                        <span>Active Projects</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <a style="text-decoration:none">
            <div class="card text-center bg-secondary">
                <div class="body">
                    <div class="p-15 text-light">

                        <h3>@*@Model.Tickets.Count()*@</h3>
                        <span>Total Tickets</span>
                    </div>
                </div>
            </div>
        </a>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card text-center bg-warning">
            <div class="body">
                <div class="p-15 text-light">
                    <h3>@*@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()*@</h3>
                    <span>Unassigned Tickets</span>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-3 col-md-6 col-sm-6">
        <div class="card text-center bg-dark">
            <div class="body">
                <div class="p-15 text-light">
                    <h3>
                        @*@(
                            Model.Projects.Count()
                            + Model.Tickets.Count()
                            + Model.Members.Count()
                            )*@
                    </h3>
                    <span>Total Data</span>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <h6 class="card-title">@ViewBag.Title</h6>
                <div class="table-responsive">
                    <table id="ticketsTable" class="table">
                        <thead>
                            <tr class="text-center">
                                <th class="text-start">Ticket Title</th>
                                <th class="text-start">Project</th>
                                <th>Last Updated Date</th>
                                <th>Type</th>
                                <th>Priority</th>
                                <th>Status</th>
                                @if (ViewBag.Title == "All Tickets")
                                {
                                    <th>Archived</th>
                                }
                                <th>Developer</th>
                                <th class="text-right">Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                foreach (Ticket ticket in Model)
                                {
                                    <tr class="text-center">
                                        <td class="text-start">
                                            <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id">@ticket.Title</a>
                                        </td>
                                        <td class="text-start"><a asp-controller="Projects" asp-action="Details" asp-route-id="@ticket.ProjectId">@ticket.Project?.Name</a></td>
                                        @if (ticket.UpdatedDate == null)
                                        {
                                            <td>@ticket.Created.ToString("MMM dd, yyyy")</td>
                                        }
                                        else
                                        {
                                            <td>@ticket.UpdatedDate.Value.ToString("MMM dd, yyyy")</td>
                                        }                                       
                                        <td>
                                            @switch (ticket.TicketType?.Name)
                                            {
                                                case nameof(BTTicketTypes.NewDevelopment):
                                                    <span class="badge bg-facebook"><i class="ti-bell"></i>&nbsp;&nbsp;New Development</span>
                                                    break;
                                                case nameof(BTTicketTypes.GeneralTask):
                                                    <span class="badge bg-dribbble"><i class="fa fa-user"></i>&nbsp;&nbsp;General Task</span>
                                                    break;
                                                case nameof(BTTicketTypes.WorkTask):
                                                    <span class="badge bg-linkedin"><i class="fa fa-users"></i>&nbsp;&nbsp;Work Task</span>
                                                    break;
                                                case nameof(BTTicketTypes.Enhancement):
                                                    <span class="badge bg-warning"><i class="fa fa-plus"></i>&nbsp;&nbsp;Enhancement</span>
                                                    break;
                                                case nameof(BTTicketTypes.ChangeRequest):
                                                    <span class="badge bg-google"><i class="fa fa-info-circle"></i>&nbsp;&nbsp;Change Request</span>
                                                    break;
                                                case nameof(BTTicketTypes.Defect):
                                                    <span class="badge bg-youtube"><i class="fa fa-warning"></i>&nbsp;&nbsp;Defect</span>
                                                    break;
                                                default:
                                                    break;
                                            }
                                        </td>
                                        <td>
                                            @switch (ticket.TicketPriority?.Name)
                                            {
                                                case nameof(BTTicketPriorities.Low):
                                                    <span class="badge bg-success-bright">@ticket.TicketPriority.Name</span>
                                                    break;
                                                case nameof(BTTicketPriorities.Medium):
                                                    <span class="badge bg-warning-bright">@ticket.TicketPriority.Name</span>
                                                    break;
                                                case nameof(BTTicketPriorities.High):
                                                    <span class="badge bg-secondary-bright">@ticket.TicketPriority.Name</span>
                                                    break;
                                                case nameof(BTTicketPriorities.Urgent):
                                                    <span class="badge bg-danger-bright">@ticket.TicketPriority.Name</span>
                                                    break;
                                                default:
                                                    break;
                                            }
                                        </td>
                                        <td>
                                            @switch (ticket.TicketStatus?.Name)
                                            {
                                                case nameof(BTTicketStatuses.New):
                                                    <span class="badge bg-primary">@ticket.TicketStatus.Name</span>
                                                    break;
                                                case nameof(BTTicketStatuses.Development):
                                                    <span class="badge bg-secondary">@ticket.TicketStatus.Name</span>
                                                    break;
                                                case nameof(BTTicketStatuses.Testing):
                                                    <span class="badge bg-info">@ticket.TicketStatus.Name</span>
                                                    break; ;
                                                case nameof(BTTicketStatuses.Resolved):
                                                    <span class="badge bg-sucess">@ticket.TicketStatus.Name</span>
                                                    break;
                                                default:
                                                    break;
                                            }
                                        </td>
                                        @if (ViewBag.Title == "All Tickets")
                                        {
                                            @if (ticket.Archived)
                                            {
                                                <td class="text-success">Archived&nbsp;&nbsp;<i class="bi bi-door-closed"></i></td>
                                            }
                                            else
                                            {
                                                <td class="text-danger">Active&nbsp;&nbsp;<i class="bi bi-door-open"></i></td>
                                            }
                                        }
                                        <td>
                                            @if (ticket.DeveloperUserId != null)
                                            {
                                                @if (ticket.DeveloperUser?.ImageFileData != null)
                                                {
                                                    <figure class="avatar">
                                                        <img data-bs-toggle="tooltip"
                                                             data-bs-placement="top"
                                                             title="@ticket.DeveloperUser?.FullName"
                                                             data-bs-title="@ticket.DeveloperUser?.FullName" src="@_FileService.ConvertByteArrayToFile(ticket.DeveloperUser?.ImageFileData, ticket.DeveloperUser?.ImageFileType, DefaultImage.BTUserImage)" class="rounded-circle" alt="avatar">
                                                    </figure>                                                    
                                                }
                                                else
                                                {
                                                    <figure class="avatar">
                                                        <span class="avatar-title bg-info-bright text-info rounded-circle"
                                                              data-bs-toggle="tooltip"
                                                              data-bs-placement="top"
                                                              title="@ticket.DeveloperUser?.FullName"
                                                              data-bs-title="@ticket.DeveloperUser?.FullName">
                                                            @ticket.DeveloperUser?.FirstName?[0]
                                                        </span>
                                                    </figure>
                                                }                                                
                                            }
                                            else
                                            {
                                                <span>Unassigned</span>
                                            }
                                        </td>
                                        <td class="text-right">
                                            <div class="dropdown">
                                                <a href="#" data-toggle="dropdown"
                                                   class="btn btn-floating"
                                                   aria-haspopup="true" aria-expanded="false">
                                                    <i class="ti-more-alt"></i>
                                                </a>
                                                <div class="dropdown-menu dropdown-menu-right">
                                                    <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id" class="dropdown-item">View Detail</a>
                                                    @{
                                                        if (User.IsInRole(nameof(BTRoles.Admin)) || (await _ProjectService.GetProjectManagerAsync(ticket.ProjectId, companyId))?.Id == _UserManager.GetUserId(User))
                                                        {
                                                            <a role="button" data-toggle="modal" data-target="#assignDevModal" class="dropdown-item" onclick="populateDevModal(@ticket.Id, @ticket.ProjectId, '@ticket.DeveloperUserId', '@ticket.Title')">Assign Dev</a>
                                                            <a asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticket.Id" class="dropdown-item">Edit</a>

                                                            @if (ticket.Archived)
                                                            {
                                                                <a role="button" data-toggle="modal" data-target="#restoreTicketModal" class="dropdown-item text-success" onclick="populateRestoreModal(@ticket.Id, '@ticket.Title')">Restore</a>
                                                            }
                                                            else
                                                            {
                                                                <a role="button" data-toggle="modal" data-target="#archiveTicketModal" class="dropdown-item text-danger" onclick="populateArchiveModal(@ticket.Id, '@ticket.Title')">Archive</a>
                                                            }
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="assignDevModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Assign Developer</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="AssignDev" method="post" class="d-flex flex-column">
                <div class="modal-body pt-1">
                    <h5 id="modalTicketTitle">Ticket Title</h5>
                    <input type="hidden" id="modalTicketId" name="ticketId" value="" />
                    <select class="form-control" name="developerId" id="developerUsers">
                        <option value="@null">Unassigned</option>
                    </select>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        Close
                    </button>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="restoreTicketModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Restore Ticket</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="Restore" asp-route-id="" method="post" class="d-flex flex-column">
                <div class="modal-body pt-0">
                    <h5 id="restoreTicketTitle">Ticket Title</h5>
                    <input type="hidden" id="restoreTicket" name="restoreTicketId" value="" />
                    <span>Are you sure you want to restore this ticket?</span>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No/Close
                    </button>
                    <button type="submit" class="btn btn-primary">Yes/Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div class="modal fade" id="archiveTicketModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalCenterTitle">Archive Ticket</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <i class="ti-close"></i>
                </button>
            </div>
            <form asp-action="Archive" method="post" class="d-flex flex-column">
                <div class="modal-body pt-0">
                    <h5 id="archiveTicketTitle">Ticket Title</h5>
                    <input type="hidden" id="archiveTicket" name="archiveTicketId" value="" />
                    <span>Are you sure you want to archive this ticket?</span>
                </div>
                <div class="modal-footer" style="height:inherit">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">
                        No/Close
                    </button>
                    <button type="submit" class="btn btn-primary">Yes/Save changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            $('#ticketsTable').DataTable({
                "columnDefs": [
                    { "type": "date", "targets": [2] }
                ]
            });
        });
    </script>
    <script>
        let projectMembers = [
        @foreach (var project in Model.Select(p => p.Project).Distinct())
        {
            <text>
                {
                    projectId: @project.Id,
                    members: [
                @foreach (var member in project.Members.Where(m => companyDeveloperIds.Contains(m.Id) == true))
                {
                    <text>
                            {
                                name: '@member.FullName',
                                id: '@member.Id',
                            },
                    </text>
                }
                                                                                                                                    ]
                },
            </text>
        }
                                                                                ];

        function getMembers(projectId) {
            return projectMembers.find(p => p.projectId == projectId).members;
        }

        function populateDevModal(iD, projectId, developerId, ticketTitle) {
            var ticketId = document.getElementById("modalTicketId");
            ticketId.value = iD;

            var modalTicketTitle = document.getElementById("modalTicketTitle");
            modalTicketTitle.innerHTML = ticketTitle;

            members = getMembers(projectId);

            var select = document.getElementById("developerUsers");
            members.forEach(function (member) {
                var option = document.createElement("option");
                option.text = member.name;
                option.value = member.id;

                if (option.value == developerId) {
                    option.selected = true;
                }

                select.add(option);
            });
        }

        function populateArchiveModal(archiveId, ticketTitle) {
            var ticketId = document.getElementById("archiveTicket");
            ticketId.value = archiveId
            var archiveTicketTitle = document.getElementById("archiveTicketTitle");
            archiveTicketTitle.innerHTML = ticketTitle;
        }

        function populateRestoreModal(restoreId, ticketTitle) {
            var ticketId = document.getElementById("restoreTicket");
            ticketId.value = restoreId;
            var restoreTicketTitle = document.getElementById("restoreTicketTitle");
            restoreTicketTitle.innerHTML = ticketTitle;
        }
    </script>
    <script>
        $(document).ready(function () {
            $('#exampleModalCenter').on('hidden.bs.modal', function () {
                $('#developerUsers').empty();
                $('#developerUsers').append('<option value="@null">Unassigned</option>');
            })
        });
    </script>

}